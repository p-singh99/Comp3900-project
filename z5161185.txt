Week 1
The group was formed on Thursday. The same day we formulated some preliminary user stories. All team members participated.

Week 2
On wednesday following the lecture we set up the Jira & github pages. The user stories from week 1 were added and acceptance criteria were specified for each.

Week 3
User stories were revised and all acceptance criteria were added. We worked on the various diagrams. I contributed to the storyboard and ER Diagram mostly. We used scrum poker to determine user story points. I added references to and finalised the background section of the proposal. The first sprint was created. Finally the proposal was submitted.

Week 4
Work was started on the first sprint. I was tasked with creating the database functionality for the first sprint. I created a remotely hosted postgres database so any team member can easily access the same database. I created a preliminary schema for the database and added some test data so the api and front end would have something to work with for testing.

Week 5
I continued working on the database. I improved the sql schema and added a python script that populates and depopulates the database with test data, based on real podcast rss feeds.
I also helped with troubleshooting some problems with the search functionality. I did a bit on the description page for downloading the podcast episodes but justin already implemented it by the time I finished it (and his implementation was better).
For next week: Keep going on rss parsing, maybe add more podcast details/episode details to the database? I also need to learn react so I can help more with the frontend stuff.

Week 6
Spent a fair bit of time making an rss scraper so the database would have a bunch of podcasts in it (ended up with 2000+ podcasts). The code will be useful for later when we allow users to add their own rss feeds to the database.
Also began work on the playback on the front end, but I'm still learning react so I didn't get much of that done.
For next week: Keep working on playback

Week 7
Spent more time working with the data in the database. I ran a script to properly extract categories from the rss feeds and store them all in the database. Previously my script would only extract 1 category and that was causing issues for the recommendation algorithm. The script to extract categories took over 5 hours to run on all 2000 podcasts! Then spent more time going through the podcasts again to add the raw xml data for each, so it's faster to get it from the frontend.
Finished off the playback so now it saves progress as it plays through and resumes where the user left off.
For next week: the next sprint starts!

Week 8
Mostly worked on fixing up the database. Spent a fair bit of time working on a plpgsql script to get recommendations which will hopefully be much quicker than the current method of fetching podcasts and looping through them to get recommendations on the backend. The backend will only need to make 1 query to the database instead of the many it currently makes. Also started work on the notifications system. Had to change the schema a bit to make things work.

Week 9
Kept working on the notifications. Got the backend done and started on the front end. The front end took longer than I was expecting and it was more fiddly than I had anticipated. I had to hand it over the pawanjot at the end because with my limited react knowledge I couldn't get the useState to work properly. He did some wizardry with custom react classes and got my system to work! It also became apparent that the 2000 podcasts in the database was too many: it would be too big to submit, and it would hopefully help speed the recommendations algorithm up if there are less potential podcasts to recommend. I scraped a list of the top 50 podcasts from listennotes.com and insterted those along with 100 random podcasts from the existing database. I also added much more data on each of the episodes of the podcast (previously we were only adding episodes to the db as needed, when a user listened to one. Now each podcast has ALL of its episodes and more are added as the podcast is updated for the notifications system.
